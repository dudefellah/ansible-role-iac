---
# defaults file for ansible-role-iac
#
# The list of packages to install through this role. By default nothing
# will be installed
iac_packages: []

# If your package install requires some special repositories to be added,
# declare them here.
#
# On RedHat systems, these entries will be passed along to the yum_repositories:
# module:
#
# name, baseurl, name, enbled, gpgcheck, gpgkey, state, description
#
# On Debian systems, these entries will be passed to the apt_repository module:
#
# repo, state, filename.
#
# Additionally, on Debian systems the values: keyserver, id, url, key_state,
# keyring and key_file will be passed to apt_key, where key_state and key_file
# will be converted to state and file, respectively.
#
# In the interests of simplicity, the apt key will be installed only when a
# `key_state` value is included in your list entry, so if you intend to install
# a key, be sure to set that value.
iac_package_repositories: []

# On RedHat-family systems, set this to true to install EPEL before doing other
# things.
iac_el_install_epel: false

# The iac_user determines ownership of placed files, and may determine the
# destination path of configured config file paths, if those paths are relative.
iac_user: null

# This determines deposited file group ownership
iac_group: null

# Permissions to apply to the installed config files in the absence of a `mode`
# specified in one of the list entries.
iac_default_mode: "0600"

# The default permission to apply to a config directory that was created with
# iac_directories.
iac_default_dir_mode: "0700"

# By default, we won't log the output of template renderings since they may
# contain sensitive information.
iac_no_log: true

# This is a list of directories that you can create in preparation of your
# config files being created. Each entry has a few values that get passed
# to `ansible.builtin.file`:
#
#   mode: The permissions of the created directory
#   path: The path of the new directory. This follows the same relative/absolute
#         path rules as the `iac_config_files`.
iac_directories: []

# This is a dict of vars to be passed to either the content or template jinja2
# templates. It can be overridden by passing 'iac_vars' to your
# `iac_config_files` list entries.
#
# In your template, you'll have to retrieve these values under the
# iac_config_vars dict.
#
# Eg. {% if iac_config_vars.my_bool %}
#     something
#     {% else %}
#     something else
#     {% endif %}
iac_config_vars: {}

# A list configuration files to install. Each list entry should have
#
#   dest: This is the destination path of the file. A relative path is given
#         relative to the iac_user home directory. If iac_user is null, an
#         error is returned.
#   content: This is a jinja2 string of contents to deposit into the destination
#            file.
#   src: This is a file on the local filesystem to render as a jinja2 template
#        file on to the remote host.
#   mode: This is the permissions mode to be applied to the destination file.
#   vars: If `src` points to a template, the values in this dict will be applied
#         to that template.
#
#         Note: If you're creating your own template, they will appear as
#         `iac_vars` and not `vars`.
#
#   Note: one of (and only one of) content or src or template should be
#         specified per entry.
iac_config_files: []

# Optionally specify the name of the service to use when setting the service
# state (started, stopped, etc). `null` means nothing will happen
iac_service_name: null

# Set the service state once at the end of the role.
# If `iac_service_state` or this value are null, the service state won't be
# affected.
iac_service_state: null

# Set the service to enabled/disabled at the end of the role.
# If `iac_service_state` or this value are null, the service won't be enabled/
# disabled through this role.
iac_service_enabled: null

# Optionally specify the name of a service to perform an action on as a result
# of config file changes.
iac_handler_service_name: null

# If an `iac_handler_service` is specified, then this state will be applied to
# it through Ansible's `service` module.
iac_handler_service_state: reloaded

# Separate from the iac_handler_service, you can run a custom command as a
# handler if a config file has changed.
iac_handler_command: null
